//
//  main.cpp
//  AsioClient
//
//  Created by shiyi on 2016/12/10.
//  Copyright © 2016年 shiyi. All rights reserved.
//

#include <iostream>
#include <boost/asio.hpp>
#include <boost/bind.hpp>

using namespace boost;

int main(int argc, const char * argv[]) {
    
    asio::io_service service;//创建调度器
    asio::ip::tcp::socket sock(service);//创建socket
    asio::ip::tcp::endpoint ep(asio::ip::address::from_string("127.0.0.1"), 6666);//创建目标地址对象
    //异步连接
    sock.async_connect(ep, [](const boost::system::error_code &error){
        if(error)
        {
            std::cout << error.message() << std::endl;
            return;
        }
        std::cout << "connect succeed" << std::endl;
    });
    
    //如果不进行run调用的话，程序会直接结束，所以这里会等待async_connect结束，
    //因此上面connect同步还是异步其实是一样的
    service.run();
    
    char data[512];
    boost::system::error_code ec;
    size_t len;

    while(true)
    {
        std::cin >> data;
        
        //发送 如果不传入 ec(error_code)参数，则出错时会抛出异常，此时可以用try-catch进行捕获，如果也没捕获，程序会直接终止
        len = sock.write_some(asio::buffer(data), ec);
        if(ec)
        {
            std::cout << boost::system::system_error(ec).what() << std::endl;
            break;
        }
        
        //接收
        len = sock.read_some(asio::buffer(data), ec);
        if(ec)
        {
            std::cout << boost::system::system_error(ec).what() << std::endl;
            break;
        }
        
        std::cout << data << std::endl;
        
    }
    
    return 0;
}
